{
  "name": "raspicam",
  "description": "A Node.js-based controller module for the Raspberry Pi camera based on a command structure similar to Johnny-Five",
  "version": "0.2.12",
  "homepage": "https://github.com/troyth/node-raspicam",
  "author": {
    "name": "Troy Conrad Therrien",
    "email": "troyth@gmail.com"
  },
  "keywords": [
    "raspberry pi",
    "camera",
    "raspicam",
    "node",
    "johnny-five"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/troyth/node-raspicam.git"
  },
  "bugs": {
    "url": "https://github.com/troyth/node-raspicam/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/troyth/node-raspicam/blob/master/LICENSE"
    }
  ],
  "main": "lib/raspicam",
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "lodash": "*"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "sinon": "~1.7.3",
    "grunt-jsbeautifier": "~0.2.2"
  },
  "readme": "# node-raspicam\r\n\r\nA Node.js-based controller module for the Raspberry Pi camera.\r\n\r\n_Note_: This should work well for photo and timelapse, video has yet to be tested but may work as well.\r\n\r\n## To Install\r\n\r\n\tnpm install raspicam\r\n\r\n## To Use\r\n\r\nRequire raspicam in your node app, then used the exposed constructor to create a RaspiCam object that you can use to take photos, start a timelapse, or record video.\r\n\r\n\tvar RaspiCam = require(\"raspicam\");\r\n\r\n\tvar camera = new RaspiCam({ opts });\r\n\r\n\t//to take a snapshot, start a timelapse or video recording\r\n\tcamera.start( );\r\n\r\n\t//to stop a timelapse or video recording\r\n\tcamera.stop( );\r\n\r\n\t//listen for the \"started\" event triggered when the start method has been successfully initiated\r\n\tcamera.on(\"started\", function(){ \r\n\t\t//do stuff\r\n\t});\r\n\r\n\t//listen for the \"read\" event triggered when each new photo/video is saved\r\n\tcamera.on(\"read\", function(err, filename){ \r\n\t\t//do stuff\r\n\t});\r\n\r\n\t//listen for the process to exit when the timeout has been reached\r\n\tcamera.on(\"exited\", function(){\r\n\t\t//do stuff\r\n\t});\r\n\r\n\r\n### RaspiCam Constructor\r\n\r\nThe RaspiCam() constructor creates an object that can then be triggered to take a snapshot or start a timelapse or video recording. The constructor options mirror those offered by the raspistill and raspivideo commands provided by the Raspberry Pi Camera API.\r\n\r\n\r\n### RaspiCam Constructor Options for Photo and Timelapse\r\n\r\n#### Required\r\n\r\n*\t`mode` : String - \"photo\" or \"timelapse\"\r\n*\t`output` : String - the path and filename where you want to store the photos (use sprintf-style variables, like %d, for incrementing timelapse photos)\r\n\r\n#### Optional\r\n\r\n##### Image parameter commands\r\n\r\n###### Parameters with Values\r\n\r\n*\t`w`, `width` : Integer or String - Set image width <size>\r\n*\t`h`, `height` : Integer or String - Set image height <size>\r\n*\t`q`, `quality` : Integer or String - Set jpeg quality <0 to 100>\r\n*\t`t`, `timeout` : Integer or String - Time (in ms) before takes picture and shuts down (if not specified, set to 5s)\r\n*\t`th`, `thumb` : String - Set thumbnail parameters (x:y:quality)\r\n*\t`e`, `encoding` : String - Encoding to use for output file (jpg, bmp, gif, png)\r\n*\t`x`, `exif` : String - EXIF tag to apply to captures (format as 'key=value')\r\n*\t`tl`, `timelapse` : Integer or String - Timelapse mode. Takes a picture every <t>ms\r\n\r\n###### Flags\r\n\r\n*\t`r`, `raw` : Add raw bayer data to jpeg metadata\r\n*\t`v`, `verbose` : Output verbose information during run\r\n*\t`d`, `demo` : Run a demo mode (cycle through range of camera options, no capture)\r\n\r\n\r\n##### Preview parameter commands\r\n\r\n###### Flags\r\n\r\nNote: I've kept these in for completeness, but I'm not sure how they will be useful.\r\n\r\n*\t`p`, `preview` : Preview window settings <'x,y,w,h'>\r\n*\t`f`, `fullscreen` : Fullscreen preview mode\r\n*\t`op`, `opacity` : Preview window opacity (0-255)\r\n*\t`n`, `nopreview` : Do not display a preview window\r\n\r\n\r\n###### Image parameter commands\r\n\r\n###### Parameters with Values\r\n\r\n*\t`sh`, `sharpness` : Integer or String - Set image sharpness (-100 to 100)\r\n*\t`co`, `contrast` : Integer or String - Set image contrast (-100 to 100)\r\n*\t`br`, `brightness` : Integer or String - Set image brightness (0 to 100)\r\n*\t`sa`, `saturation` : Integer or String - Set image saturation (-100 to 100)\r\n*\t`ISO`, `ISO` : Integer or String - Set capture ISO\r\n*\t`ev`, `ev` : Integer or String - Set EV compensation\r\n*\t`ex`, `exposure` : String - Set exposure mode (off,auto,night,nightpreview,backlight,spotlight,sports,snow,beach,verylong,fixedfps,antishake,fireworks)\r\n*\t`awb`, `awb` : String - Set AWB mode (off,auto,sun,cloud,shade,tungsten,fluorescent,incandescent,flash,horizon)\r\n*\t`ifx`, `imxfx` : String - Set image effect (none,negative,solarise,sketch,denoise,emboss,oilpaint,hatch,gpen,pastel,watercolour,film,blur,saturation,colourswap,washedout,posterise,colourpoint,colourbalance,cartoon)\r\n*\t`cfx`, `colfx` : String - Set colour effect (U:V)\r\n*\t`mm`, `metering` : String - Set metering mode (average,spot,backlit,matrix)\r\n*\t`rot`, `rotation` : Integer or String - Set image rotation (0-359)\r\n\r\n###### Flags\r\n\r\n*\t`vs`, `vstab` : Turn on video stablisation\r\n*\t`hf`, `hflip` : Set horizontal flip\r\n*\t`vf`, `vflip` : Set vertical flip\r\n\r\n\r\n\r\n### RaspiCam Constructor Options for Video\r\n\r\n#### Required\r\n\r\n*\t`mode` : String - \"video\"\r\n*\t`output` : String - the path and filename where you want to store the video (to write to stdout, use '-')\r\n\r\n#### Optional\r\n\r\n##### Image parameter commands\r\n\r\n###### Parameters with Values\r\n\r\n*\t`w`, `width` : Integer or String - Set image width <size> (Default is 1920)\r\n*\t`h`, `height` : Integer or String - Set image height <size> (Default is 1080)\r\n*\t`b`, `bitrate` : Integer or String - Set bitrate. Use bits per second (e.g. 10MBits/s would be 10000000)\r\n*\t`t`, `timeout` : Integer or String - Time (in ms) to capture for. If not specified, set to 5s. Zero to disable\r\n*\t`fps`, `framerate` : Integer or String - Specify the frames per second to record\r\n*\t`g`, `intra` : Integer or String - Specify the intra refresh period (key frame rate/GoP size)\r\n\r\n###### Flags\r\n\r\n*\t`v`, `verbose` : Output verbose information during run\r\n*\t`d`, `demo` : Run a demo mode (cycle through range of camera options, no capture)\r\n*\t`e`, `penc` : Display preview image _after_ encoding (shows compression artifacts)\r\n\r\n\r\n##### Preview parameter commands\r\n\r\n###### Flags\r\n\r\nNote: I've kept these in for completeness, but I'm not sure how they will be useful.\r\n\r\n*\t`p`, `preview` : Preview window settings <'x,y,w,h'>\r\n*\t`f`, `fullscreen` : Fullscreen preview mode\r\n*\t`op`, `opacity` : Preview window opacity (0-255)\r\n*\t`n`, `nopreview` : Do not display a preview window\r\n\r\n\r\n###### Image parameter commands\r\n\r\n###### Parameters with Values\r\n\r\n*\t`sh`, `sharpness` : Integer or String - Set image sharpness (-100 to 100)\r\n*\t`co`, `contrast` : Integer or String - Set image contrast (-100 to 100)\r\n*\t`br`, `brightness` : Integer or String - Set image brightness (0 to 100)\r\n*\t`sa`, `saturation` : Integer or String - Set image saturation (-100 to 100)\r\n*\t`ISO`, `ISO` : Integer or String - Set capture ISO\r\n*\t`ev`, `ev` : Integer or String - Set EV compensation\r\n*\t`ex`, `exposure` : String - Set exposure mode (off,auto,night,nightpreview,backlight,spotlight,sports,snow,beach,verylong,fixedfps,antishake,fireworks)\r\n*\t`awb`, `awb` : String - Set AWB mode (off,auto,sun,cloud,shade,tungsten,fluorescent,incandescent,flash,horizon)\r\n*\t`ifx`, `imxfx` : String - Set image effect (none,negative,solarise,sketch,denoise,emboss,oilpaint,hatch,gpen,pastel,watercolour,film,blur,saturation,colourswap,washedout,posterise,colourpoint,colourbalance,cartoon)\r\n*\t`cfx`, `colfx` : String - Set colour effect (U:V)\r\n*\t`mm`, `metering` : String - Set metering mode (average,spot,backlit,matrix)\r\n*\t`rot`, `rotation` : Integer or String - Set image rotation (0-359)\r\n\r\n###### Flags\r\n\r\n*\t`vs`, `vstab` : Turn on video stablisation\r\n*\t`hf`, `hflip` : Set horizontal flip\r\n*\t`vf`, `vflip` : Set vertical flip\r\n\r\n\r\n\r\n### RaspiCam Object Methods\r\n\r\n#### RaspiCam.start( )\r\n\r\nDepending on the `mode`, this will either take a snapshot (\"photo\"), start a timelapse (\"timelapse\") or start a video recording (\"video\").\r\n\r\nYou can only call start() once on a RaspiCam object, as the same physical camera cannot do multiple captures at once.\r\n\r\nReturns `false` if any errors, otherwise returns `true`.\r\n\r\nEmits the following signals:\r\n\r\n*\t`start` with payload (err, timestamp) when the capture process was started by a .start() method call\r\n*\t`read` with payload (err, timestamp, filename) when a new file is saved (very useful for timelapses)\r\n*\t`exit` with payload (timestamp) when the capture process exits via timeout\r\n\r\n\r\n#### RaspiCam.stop( )\r\n\r\nThis stops any ongoing camera process.\r\n\r\nReturns `true` if it stopped a process, otherwise returns `false`.\r\n\r\nEmits the following signals:\r\n\r\n*\t`stop` with payload (err, timestamp) when the capture process was stopped by a .stop() method call\r\n\r\n\r\n#### RaspiCam.set( opt, value )\r\n\r\nThis is a setter - it sets any option you give it. Opt must be a string (eg. \"width\").\r\n\r\n\r\n#### RaspiCam.get( opt )\r\n\r\nThis is a getter - it returns any option you give it. Opt must be a string (eg. \"width\").\r\n\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "raspicam@0.2.12",
  "dist": {
    "shasum": "5ce2a0b211c1a093e831cb7c62c93650764a1919"
  },
  "_resolved": "git+https://github.com/stevies/node-raspicam.git#8c438e8dc4f0079306a5b72c4fa5bd9c7abfe9b2",
  "_from": "raspicam@git+https://github.com/stevies/node-raspicam.git#master"
}
